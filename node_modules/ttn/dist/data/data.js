"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataClient = undefined;

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _sourceMapSupport2 = require("source-map-support");

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

var _mqtt = require("mqtt");

var _mqtt2 = _interopRequireDefault(_mqtt);

var _debug = require("../utils/debug");

var _debug2 = _interopRequireDefault(_debug);

var _topic = require("./topic");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)(); // Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

/**
 * DataClient is a client for The Things Network data API.
 */
var DataClient = exports.DataClient = function () {

  /**
   * Creates a new DataClient and opens the MQTT connection.
   */


  /** @private */
  function DataClient(appID, appAccessKey, mqttAddress) {
    (0, _classCallCheck3.default)(this, DataClient);

    this.appID = appID;
    this.emitter = new _events2.default();

    var _mqttAddress$split = mqttAddress.split(":"),
        _mqttAddress$split2 = (0, _slicedToArray3.default)(_mqttAddress$split, 2),
        host = _mqttAddress$split2[0],
        _mqttAddress$split2$ = _mqttAddress$split2[1],
        port = _mqttAddress$split2$ === undefined ? "1883" : _mqttAddress$split2$;

    (0, _debug2.default)("connecting to mqtt host `%s` on port %d, using username `%s`", host, parseInt(port), appID);

    this.mqtt = _mqtt2.default.connect({
      host: host,
      port: parseInt(port),
      username: appID,
      password: appAccessKey
    });

    this.mqtt.on("error", this.onError.bind(this));
    this.mqtt.on("connect", this.onConnect.bind(this));
    this.mqtt.on("message", this.onMessage.bind(this));
    this.mqtt.on("reconnect", this.onReconnect.bind(this));
    this.mqtt.on("close", this.onClose.bind(this));
  }

  /**
   * Close the mqtt connection
   *
   * @param force - passing it to true will close the client right away, without waiting for the in-flight messages to be acked
   * @param callback - will be called when the client is closed
   */


  /** @private */

  /** @private */


  (0, _createClass3.default)(DataClient, [{
    key: "close",
    value: function close() {
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var callback = arguments[1];

      (0, _debug2.default)("closing mqtt client");
      return this.mqtt.end(force, callback);
    }

    /**
     * Same as close (for backwards compatibility).
     */

  }, {
    key: "end",
    value: function end(force, callback) {
      return this.close(force, callback);
    }

    /**
     * Starts listening to events.
     *
     * Possible events are:
     *
     * - `uplink` (or `message`): Messages sent by the devices to the appliction.
     * - `activation`: An alias for the `activations` (see `event`)
     * - `event` (or `device`): Events that happen to devices. You can filter on
     *   the events by adding more parameters. For instance:
     *   - `downlink/scheduled`
     *   - `downlink/sent`
     *   - `activations`
     *   - `create`
     *   - `update`
     *   - `delete`
     *   - `down/acks`
     *   - `up/errors`
     *   - `down/errors`
     *   - `activations/errors`
     *
     * See [The MQTT API Reference](https://www.thethingsnetwork.org/docs/applications/mqtt/api.html)
     * for more information about these events and what their payloads look like.
     *
     * @param event - The name of the event to listen to.
     * @param [devID] - An optional devID. If not passed will subscribe to the event for all devices.
     * @param [name|field] - The name of the field to listen for on uplink or the event for device events.
     * @param callback - The callback to call when the event occurs.
     *
     * @example
     * // listens to all uplinks from all devices
     * client.on("uplink", function (devID, message) {})
     *
     * @example
     * // listens to all uplinks from the device with id `foo`
     * client.on("uplink", "foo", function (devID, message) {})
     *
     * @example
     * // listens to all device events for all devices
     * client.on("event", function (devID, message) {})
     *
     * @example
     * // listens to all device events for device with id `foo`
     * client.on("event", "foo", function (devID, message) {})
     *
     * @example
     * // listens to the `downlink/scheduled` events for device with id `foo`
     * client.on("event", "foo", "downlink/scheduled", function (devID, message) {})
     *
     * @example
     * // listens to the `downlink/scheduled` events for all devices
     * client.on("event", "+", "downlink/scheduled", function (devID, message) {})
     */

  }, {
    key: "on",
    value: function on(event) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return this.toggle.apply(this, [true, event].concat(args));
    }

    /**
     * Stop listening to events.
     * The argument structure is the same as for `on()`.
     */

  }, {
    key: "off",
    value: function off(event) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return this.toggle.apply(this, [false, event].concat(args));
    }

    /**
     * @private
     * Toggles the subscription matching to the received arguments
     *
     */

  }, {
    key: "toggle",
    value: function toggle(on, event) {
      for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }

      if (args.length < 1) {
        throw new Error("Need at least one argument to on");
      }

      var rest = args.slice(0);

      var cb = rest.pop();

      var t = null;

      switch (event) {
        case "uplink":
        case "message":
          t = _topic.uplinkTopic.apply(undefined, (0, _toConsumableArray3.default)(rest));
          break;
        case "device":
        case "event":
        case "events":
          t = _topic.eventTopic.apply(undefined, (0, _toConsumableArray3.default)(rest));
          break;
        case "activation":
          var _rest = (0, _slicedToArray3.default)(rest, 1),
              _rest$ = _rest[0],
              _devID = _rest$ === undefined ? _topic.wildcard : _rest$;

          t = (0, _topic.eventTopic)(_devID, "activations");
          break;
        case "error":
        case "connect":
        case "reconnect":
        case "close":
          this.emitter.on(event, cb);
          return;
      }

      if (t === null) {
        throw new Error("Could not build topic");
      }

      if (on) {
        this.subscribe(t, cb);
      } else {
        this.unsubscribe(t, cb);
      }
    }

    /**
     * Send a downlink message to the device with the specified device ID.
     *
     * @param devID - The device ID of the device to send the downlink to.
     * @param payload - The raw payload as a Buffer, an Array of numbers, a hex string  or an object of payload fields.
     * @param port - The port to send the message on.
     * @param confirmed - Set to true for confirmed downlink.
     * @param schedule - Set to the scheduling you want to use (first, last or replace).
     */

  }, {
    key: "send",
    value: function send(devID, payload) {
      var port = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var confirmed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var schedule = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "replace";

      var t = (0, _topic.downlinkTopic)(this.appID, devID);
      var message = {
        port: port,
        confirmed: confirmed,
        schedule: schedule
      };

      if (Array.isArray(payload)) {
        message.payload_raw = new Buffer(payload).toString("base64");
      } else if (payload instanceof Buffer) {
        message.payload_raw = payload.toString("base64");
      } else if (typeof payload === "string") {
        message.payload_raw = new Buffer(payload, "hex").toString("base64");
      } else {
        message.payload_fields = payload;
      }

      (0, _debug2.default)("publishing message to %s: %O", t, message);

      this.mqtt.publish(t, (0, _stringify2.default)(message));
    }

    /**
     * @private
     * `onError` is called whenever there's an error in the MQTT client.
     */

  }, {
    key: "onError",
    value: function onError(err) {
      (0, _debug2.default)("mqtt client received error: %s", err);
      this.emitter.emit("error", err);
    }

    /**
     * @private
     * `onConnect` is called whenever the MQTT client (re-)connects.
     */

  }, {
    key: "onConnect",
    value: function onConnect(ack) {
      (0, _debug2.default)("mqtt client connected");
      this.emitter.emit("connect", ack);
    }

    /**
     * @private
     * `onReconnect` is called whenever the MQTT client starts reconnecting.
     */

  }, {
    key: "onReconnect",
    value: function onReconnect() {
      (0, _debug2.default)("mqtt client reconnecting");
      this.emitter.emit("reconnect", undefined);
    }

    /**
     * @private
     * `onClose` is called after the MQTT disconnects.
     */

  }, {
    key: "onClose",
    value: function onClose() {
      (0, _debug2.default)("mqtt client disconnected");
      this.emitter.emit("close", undefined);
    }

    /**
     * @private
     * `onMessage` is called when a new message is received from any subscription.
     */

  }, {
    key: "onMessage",
    value: function onMessage(topic, message) {
      var _this = this;

      var payload = JSON.parse(message.toString());

      if (payload && typeof payload.payload_raw === "string") {
        payload.payload_raw = new Buffer(payload.payload_raw, "base64");
      }

      (0, _debug2.default)("received message on topic `%s`: %O", topic, payload);

      var dev = (0, _topic.devID)(topic);
      (0, _topic.validWildcards)(topic).forEach(function (topic) {
        return _this.emitter.emit(topic, dev, payload);
      });
    }

    /**
     * @private
     * `subscribe` subscribes the mqtt client to the specified topic and hooks up
     * the callback in the event emitter.
     */

  }, {
    key: "subscribe",
    value: function subscribe(topic, cb) {
      (0, _debug2.default)("subscribing to messages on topic `%s`", topic);
      this.mqtt.subscribe(topic);
      this.emitter.on(topic, cb);
    }

    /**
     * @private
     * `unsubscribe` unsubscribes the mqtt client from the specified topic and
     * removes the callback from the event emitter.
     */

  }, {
    key: "unsubscribe",
    value: function unsubscribe(topic, cb) {
      (0, _debug2.default)("unsubscribing from messages on topic `%s`", topic);
      this.mqtt.unsubscribe(topic);
      this.emitter.removeListener(topic, cb);
    }
  }]);
  return DataClient;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,