"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApplicationClient = undefined;

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _sourceMapSupport2 = require("source-map-support");

var _grpc = require("grpc");

var _grpc2 = _interopRequireDefault(_grpc);

var _handler_pb = require("ttnapi/handler/handler_pb");

var _handler_pb2 = _interopRequireDefault(_handler_pb);

var _device_pb = require("ttnapi/protocol/lorawan/device_pb");

var _device_pb2 = _interopRequireDefault(_device_pb);

var _handler_grpc_pb = require("ttnapi/handler/handler_grpc_pb");

var _handler_grpc_pb2 = _interopRequireDefault(_handler_grpc_pb);

var _utils = require("../utils");

var _isToken = require("../utils/is-token");

var _isToken2 = _interopRequireDefault(_isToken);

var _normalize = require("./normalize");

var _normalize2 = _interopRequireDefault(_normalize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)(); // Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

// Necessary to make gRPC work
process.env.GRPC_SSL_CIPHER_SUITES = _utils.MODERN_CIPHER_SUITES;

/**
 * A client that manages devices on the handler.
 */

var ApplicationClient = exports.ApplicationClient = function () {

  /**
   * Create and open an application manager client that can be used for
   * retreiving and updating an application and its devices.
   *
   * @param appID - The ID of the application you want to manage
   * @param tokenOrKey - The Access Token or Access Key used to authenticate
   * @param netAddress - The gRPC address of the handler where the application is registered
   * @param certificate - An optional certificate used to connect to the handler securely
   */


  /** @private */


  /** @private */
  function ApplicationClient(appID, tokenOrKey, netAddress, certificate) {
    (0, _classCallCheck3.default)(this, ApplicationClient);

    var credentials = certificate ? _grpc2.default.credentials.createSsl(certificate && new Buffer(certificate)) : _grpc2.default.credentials.createInsecure();

    this.client = new _handler_grpc_pb2.default.ApplicationManagerClient(netAddress, credentials);
    this.appID = appID;

    if ((0, _isToken2.default)(tokenOrKey)) {
      this.appAccessToken = tokenOrKey;
    } else {
      this.appAccessKey = tokenOrKey;
    }
  }

  /** @private */


  /** @private */


  /** @private */


  (0, _createClass3.default)(ApplicationClient, [{
    key: "exec",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(fn) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var meta, res;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                meta = new _grpc2.default.Metadata();

                if (this.appAccessToken) {
                  meta.add("token", this.appAccessToken);
                } else if (this.appAccessKey) {
                  meta.add("key", this.appAccessKey);
                }

                _context.next = 4;
                return _utils.wrap.apply(undefined, [this.client, fn].concat((0, _toConsumableArray3.default)(args), [meta]));

              case 4:
                res = _context.sent;
                return _context.abrupt("return", res.toObject());

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function exec(_x) {
        return _ref.apply(this, arguments);
      }

      return exec;
    }()

    /**
     * Get the application
     */

  }, {
    key: "get",
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
        var req, app;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                req = new _handler_pb2.default.ApplicationIdentifier();

                req.setAppId(this.appID);

                _context2.next = 4;
                return this.exec(this.client.getApplication, req);

              case 4:
                app = _context2.sent;

                app.payloadFormat = app.payloadFormat || "custom";

                return _context2.abrupt("return", app);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function get() {
        return _ref2.apply(this, arguments);
      }

      return get;
    }()

    /**
     * Change the payload format of the application.
     */

  }, {
    key: "setPayloadFormat",
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(format) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.set({
                  payloadFormat: format
                });

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function setPayloadFormat(_x2) {
        return _ref3.apply(this, arguments);
      }

      return setPayloadFormat;
    }()

    /**
     * Set the custom payload functions of the application and set the format
     * to custom.
     */

  }, {
    key: "setCustomPayloadFunctions",
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
        var fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.set((0, _extends3.default)({
                  payloadFormat: "custom"
                }, fns));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function setCustomPayloadFunctions() {
        return _ref4.apply(this, arguments);
      }

      return setCustomPayloadFunctions;
    }()

    /**
     * Set the registerOnJoinAccessKey or remove it.
     */

  }, {
    key: "setRegisterOnJoinAccessKey",
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(to) {
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.set({
                  registerOnJoinAccessKey: to
                });

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function setRegisterOnJoinAccessKey(_x4) {
        return _ref5.apply(this, arguments);
      }

      return setRegisterOnJoinAccessKey;
    }()

    /**
     * Unregister the application from the handler.
     */

  }, {
    key: "unregister",
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
        var req;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                req = new _handler_pb2.default.ApplicationIdentifier();

                req.setAppId(this.appID);
                return _context6.abrupt("return", this.exec(this.client.deleteApplication, req));

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function unregister() {
        return _ref6.apply(this, arguments);
      }

      return unregister;
    }()

    /** @private */

  }, {
    key: "set",
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
        var updates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var req;
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                req = new _handler_pb2.default.Application();


                req.setAppId(this.appID);

                if ("payloadFormat" in updates) {
                  req.setPayloadFormat(updates.payloadFormat);
                }

                if ("registerOnJoinAccessKey" in updates) {
                  req.setRegisterOnJoinAccessKey(updates.registerOnJoinAccessKey);
                }

                if ("decoder" in updates) {
                  req.setDecoder(updates.decoder);
                }

                if ("converter" in updates) {
                  req.setConverter(updates.converter);
                }

                if ("validator" in updates) {
                  req.setValidator(updates.validator);
                }

                if ("encoder" in updates) {
                  req.setEncoder(updates.encoder);
                }

                return _context7.abrupt("return", this.exec(this.client.setApplication, req));

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function set() {
        return _ref7.apply(this, arguments);
      }

      return set;
    }()

    /**
     * List the devices of the application
     */

  }, {
    key: "devices",
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
        var req, res;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                req = new _handler_pb2.default.ApplicationIdentifier();

                req.setAppId(this.appID);
                _context8.next = 4;
                return this.exec(this.client.getDevicesForApplication, req);

              case 4:
                res = _context8.sent;
                return _context8.abrupt("return", res.devicesList.map(_normalize2.default));

              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function devices() {
        return _ref8.apply(this, arguments);
      }

      return devices;
    }()

    /**
     * Register a device in the application.
     */

  }, {
    key: "registerDevice",
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(devID, device) {
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt("return", this.setDevice(devID, device));

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function registerDevice(_x6, _x7) {
        return _ref9.apply(this, arguments);
      }

      return registerDevice;
    }()

    /**
     * Get the device specified by the devID
     */

  }, {
    key: "device",
    value: function () {
      var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(devID) {
        var req, res;
        return _regenerator2.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                req = new _handler_pb2.default.DeviceIdentifier();

                req.setAppId(this.appID);
                req.setDevId(devID);
                _context10.next = 5;
                return this.exec(this.client.getDevice, req);

              case 5:
                res = _context10.sent;
                return _context10.abrupt("return", (0, _normalize2.default)(res));

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function device(_x8) {
        return _ref10.apply(this, arguments);
      }

      return device;
    }()

    /** @private */

  }, {
    key: "setDevice",
    value: function () {
      var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(devID, device) {
        var req;
        return _regenerator2.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                req = this.deviceRequest(devID, device);
                return _context11.abrupt("return", this.exec(this.client.setDevice, req));

              case 2:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function setDevice(_x9, _x10) {
        return _ref11.apply(this, arguments);
      }

      return setDevice;
    }()

    /**
     * Update the device specified by the devID with the specified updates
     */

  }, {
    key: "updateDevice",
    value: function () {
      var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(devID, updates) {
        var device, req;
        return _regenerator2.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.device(devID);

              case 2:
                device = _context12.sent;
                req = this.deviceRequest(devID, (0, _extends3.default)({}, device, updates));
                return _context12.abrupt("return", this.exec(this.client.setDevice, req));

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function updateDevice(_x11, _x12) {
        return _ref12.apply(this, arguments);
      }

      return updateDevice;
    }()

    /**
     * Delete the specified device.
     */

  }, {
    key: "deleteDevice",
    value: function () {
      var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(devID) {
        var req;
        return _regenerator2.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                req = new _handler_pb2.default.DeviceIdentifier();

                req.setAppId(this.appID);
                req.setDevId(devID);
                return _context13.abrupt("return", this.exec(this.client.deleteDevice, req));

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function deleteDevice(_x13) {
        return _ref13.apply(this, arguments);
      }

      return deleteDevice;
    }()

    /** @private */

  }, {
    key: "deviceRequest",
    value: function deviceRequest(devID) {
      var device = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var req = new _handler_pb2.default.Device();
      req.setAppId(this.appID);
      req.setDevId(devID);

      if ("description" in device) {
        req.setDescription(device.description);
      }

      if ("latitude" in device) {
        req.setLatitude(device.latitude);
      }

      if ("longitude" in device) {
        req.setLongitude(device.longitude);
      }

      if ("altitude" in device) {
        req.setAltitude(device.altitude);
      }

      if ("attributes" in device) {
        (0, _keys2.default)(device.attributes).forEach(function (key) {
          req.getAttributesMap().set(key, device.attributes[key]);
        });
      }

      req.setLorawanDevice(this.lorawanDeviceRequest(devID, device));

      return req;
    }

    /** @private */

  }, {
    key: "lorawanDeviceRequest",
    value: function lorawanDeviceRequest(devID) {
      var device = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var req = new _device_pb2.default.Device();

      req.setAppId(this.appID);
      req.setDevId(devID);

      if ("appEui" in device) {
        req.setAppEui(new Uint8Array(new Buffer(device.appEui, "hex")));
      }

      if ("devEui" in device) {
        req.setDevEui(new Uint8Array(new Buffer(device.devEui, "hex")));
      }

      if ("devAddr" in device) {
        req.setDevAddr(new Uint8Array(new Buffer(device.devAddr, "hex")));
      }

      if ("nwkSKey" in device) {
        req.setNwkSKey(new Uint8Array(new Buffer(device.nwkSKey, "hex")));
      }

      if ("appSKey" in device) {
        req.setAppSKey(new Uint8Array(new Buffer(device.appSKey, "hex")));
      }

      if ("appKey" in device) {
        req.setAppKey(new Uint8Array(new Buffer(device.appKey, "hex")));
      }

      if ("fCntUp" in device) {
        req.setFCntUp(device.fCntUp);
      }

      if ("fCntDown" in device) {
        req.setFCntDown(device.fCntDown);
      }

      if ("disableFCntCheck" in device) {
        req.setDisableFCntCheck(device.disableFCntCheck);
      }

      if ("uses32BitFCnt" in device) {
        req.setUses32BitFCnt(device.uses32BitFCnt);
      }

      return req;
    }
  }]);
  return ApplicationClient;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,